import logging
from aiogram.types import ErrorEvent
from aiogram import Router

router = Router()
logger = logging.getLogger(__name__)


@router.errors()
async def handle_unknown_error(event: ErrorEvent):
    logger.exception("Unexpected error: %s", event.exception)
    try:
        if event.update and event.update.message:
            await event.update.message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception:
        pass


async def handle_mcp_connection_error(update, context=None):
    if hasattr(update, "message") and update.message:
        await update.message.answer("‚ö†Ô∏è MCP-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_channel_permission_error(update, context=None):
    if hasattr(update, "message") and update.message:
        await update.message.answer("üö´ –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")


async def handle_rate_limit_error(update, context=None):
    if hasattr(update, "message") and update.message:
        await update.message.answer("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
