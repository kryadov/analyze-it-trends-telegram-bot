import asyncio
import re
import time
from typing import Optional, Dict, Any

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message

from ..keyboards.inline import main_menu_keyboard
from ..services import container
from ..database.repository import get_or_create_user, get_active_channel, set_channel

router = Router()

# Simple in-memory rate limiter: one analysis per user per 10 minutes
_LAST_ANALYZE_AT: dict[int, float] = {}
_ANALYZE_COOLDOWN_SECONDS = 600


def _parse_analyze_args(text: str) -> Dict[str, Any]:
    params: Dict[str, Any] = {}
    m_days = re.search(r"--days\s+(\d+)", text)
    if m_days:
        params["days"] = int(m_days.group(1))
    m_format = re.search(r"--format\s+(pdf|excel|html)", text, flags=re.IGNORECASE)
    if m_format:
        fmt = m_format.group(1).lower()
        params["format"] = "xlsx" if fmt == "excel" else fmt
    return params


@router.message(CommandStart())
async def cmd_start(message: Message):
    cfg = container.config or {}
    admin_ids = cfg.get("bot", {}).get("admin_users", [])
    await get_or_create_user(container.db, message.from_user.id, message.from_user.username, message.from_user.first_name, admin_ids)

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ IT-—Ç—Ä–µ–Ω–¥–æ–≤.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
        "üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã –Ω–∞ –±–∏—Ä–∂–∞—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–∞\n"
        "üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ø—Ä–æ—Å –Ω–∞ IT-—É—Å–ª—É–≥–∏\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/analyze ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤—Ä—É—á–Ω—É—é\n"
        "/set_channel <@username|id> ‚Äî —É–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
        "/get_channel ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª"
    )
    await message.answer(text, reply_markup=main_menu_keyboard())


@router.message(Command(commands=["get_channel"]))
async def cmd_get_channel(message: Message):
    ch = await get_active_channel(container.db, message.from_user.id)
    if ch:
        await message.answer(f"üì¢ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: {ch.channel_username or ch.channel_id}")
    else:
        await message.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π: /set_channel <@channel_username –∏–ª–∏ channel_id>")


@router.message(Command(commands=["set_channel"]))
async def cmd_set_channel(message: Message):
    if not message.text:
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏ –∫–∞–Ω–∞–ª: /set_channel <@username –∏–ª–∏ id>")
        return
    raw = parts[1].strip()

    # Validate and resolve channel
    channel_id = raw
    channel_username: Optional[str] = None

    if raw.startswith("@"):
        channel_username = raw
        channel_id = raw

    # Check bot permissions by attempting to fetch chat and member info
    try:
        chat = await container.bot.get_chat(channel_id)
        me = await container.bot.get_chat_member(chat.id, container.bot.id)
        # If private channel, chat.username may be None
        can_post = getattr(me, "can_post_messages", True)
        if not can_post and chat.type in ("channel", "supergroup"):
            await message.answer("üö´ –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        channel_id = str(chat.id)
        channel_username = chat.username and ("@" + chat.username)
    except Exception:
        # Fallback: allow saving raw ID; real send will fail if wrong
        pass

    ch = await set_channel(container.db, message.from_user.id, channel_id, channel_username)
    await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {channel_username or channel_id}")


@router.message(Command(commands=["analyze", "report"]))
async def cmd_analyze(message: Message):
    # Rate limiting
    now = time.time()
    last = _LAST_ANALYZE_AT.get(message.from_user.id, 0)
    if now - last < _ANALYZE_COOLDOWN_SECONDS:
        wait = int(_ANALYZE_COOLDOWN_SECONDS - (now - last))
        await message.answer(f"‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏ {wait} —Å–µ–∫.")
        return

    # Ensure channel is configured
    ch = await get_active_channel(container.db, message.from_user.id)
    if not ch:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: /set_channel <@username –∏–ª–∏ id>")
        return

    params = _parse_analyze_args(message.text or "")

    # Progress updates
    msg_id = await container.report_service.send_progress_updates(message.chat.id, "start")
    await container.report_service.send_progress_updates(message.chat.id, "reddit", msg_id)
    await asyncio.sleep(0.2)
    await container.report_service.send_progress_updates(message.chat.id, "freelance", msg_id)
    await asyncio.sleep(0.2)
    await container.report_service.send_progress_updates(message.chat.id, "trends", msg_id)

    try:
        path, data = await container.report_service.create_report(message.from_user.id, params)
        await container.report_service.send_progress_updates(message.chat.id, "report", msg_id)
        caption = container.report_service.format_caption(data)
        await container.report_service.publish_to_channel(ch.channel_id, path, caption)
        await container.report_service.send_progress_updates(message.chat.id, "done", msg_id)
        await container.bot.send_message(message.chat.id, f"‚úÖ –û—Ç—á–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {ch.channel_username or ch.channel_id}")
        _LAST_ANALYZE_AT[message.from_user.id] = time.time()
    except Exception as e:
        await container.bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id, text="‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–æ–±—â–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        raise
